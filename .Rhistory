"href"), perl = TRUE)
gsub("(<!page=)", "", "asdfpage=4")
gsub("(?<!page=)", "", "asdfpage=4")
gsub("(?<=page=)([0-9]*)", "\\1", "asdfpage=4")
gsub("(?<!page=)", "", "asdfpage=4", perl = TRUE)
gsub("(?<=page=)([0-9]*)", "\\1", "asdfpage=4", perl = TRUE)
gsub("(?<=page\\=)([0-9]*)", "\\1", "asdfpage=4", perl = TRUE)
html_attr(html_nodes(students_html, xpath = last_xp)[[1]],
"href")
gsub(".*\\=", "", html_attr(html_nodes(students_html, xpath = last_xp)[[1]],
"href"))
page_n <-
gsub(".*\\=", "",
html_attr(html_nodes(students_html,
xpath = last_xp)[[1]], "href"))
page_n <-
as.integer(gsub(".*\\=", "",
html_attr(html_nodes(students_html,
xpath = last_xp)[[1]], "href")))
page_n
html_nodes(students_html, xpath = '//*[@id="main_content"]/div/div[1]/table')
students_html %>% html_nodes(xpath = table_xp) %>% html_table()
table_xp <- '//*[@id="main_content"]/div/div[1]/table'
students_html %>% html_nodes(xpath = table_xp) %>% html_table()
lapply(1:page_n, function(kk) html(paste0(page1, "?page=", kk)) %>%
html_nodes(xpath = table_xp) %>% html_table() %>% `[[`(1L) %>%
setDT())
rbindlist(c(list(html_to_table(students_html)),
lapply(1:page_n,
function(kk) html(paste0(page1, "?page=", kk)) %>% html_to_table)))
html_to_table <- function(html)
html_nodes(html, xpath = table_xp) %>% html_table() %>% `[[`(1L) %>% setDT()
rbindlist(c(list(html_to_table(students_html)),
lapply(1:page_n,
function(kk) html(paste0(page1, "?page=", kk)) %>% html_to_table)))
library(rvest)
library(data.table)
#student directory URL
page1 <- "http://economics.sas.upenn.edu/graduate-program/current-students"
#need both students & total # of pages from first page, so treat separately
students_html <- html(page1)
#relevant XPath selectors
last_xp <- '//*[@id="main_content"]/div/div[2]/ul/li[8]/a'
table_xp <- '//*[@id="main_content"]/div/div[1]/table'
#total number of remaining student pages
page_n <-
as.integer(gsub(".*\\=", "",
html_attr(html_nodes(students_html,
xpath = last_xp)[[1]], "href")))
#convenience
html_to_table <- function(html)
html_nodes(html, xpath = table_xp) %>% html_table() %>% `[[`(1L) %>% setDT()
#acquire data, concatenate
students <-
rbindlist(c(list(html_to_table(students_html)),
lapply(1:page_n,
function(kk) html(paste0(page1, "?page=", kk)) %>%
html_to_table)))[ , Photo := NULL] #don't need Photo
#for usability
setnames(students, c("name", "email", "start_year", "office"))
students
students
students[ , .N, by = substr(office, 1, 1)]
students[ , .N, keyby = substr(office, 1, 1)]
students[substr(office, 1, 1) == " "]
students[substr(office, 1, 1) == ""]
students[!grepl("@",email)]
students[!grepl("sas",email)]
students[sapply(strsplit(name, " "), length) > 2]
students[ , table(start_year)]
students[start_year == 2009]
df <- data.frame(id = rep(c("a","b","c"),4), sex = rep(c("M","F"),6), score = 1:12)
df
df[ , .(list(sex), max(score)), by = id]
df <- data.frame(id = rep(c("a","b","c"),4), sex = rep(c("M","F"),6), score = 1:12)
setDT(df)
df[ , .(list(sex), max(score)), by = id]
NN <- 1e6
microbenchmark(times = 1000L,
c("a","b","c")[sample(3, NN, TRUE)],
sample(c("a","b","c"), NN, TRUE))
microbenchmark(times = 500L,
letters[sample(3, NN, TRUE)],
sample(letters, NN, TRUE))
?em
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 50L,
mikec = df[ , .(list(sex), max(score)), by = id],
count = df %>% group_by(id) %>%
summarise(score = max(score),
sex = paste(unique(sex),collapse=",")))
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 50L,
mikec = DT[ , .(list(sex), max(score)), by = id],
count = DT %>% group_by(id) %>%
summarise(score = max(score),
sex = paste(unique(sex),collapse=",")))
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 50L,
mikec = DT[ , .(list(unique(sex)), max(score)), by = id],
mikec_str = DT[ , .(paste(unique(sex), collapse = ","),
score = max(score)), by = id],
count = DT %>% group_by(id) %>%
summarise(score = max(score),
sex = paste(unique(sex),collapse=",")))
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 50L,
mikec = DT[ , .(list(unique(sex)), max(score)), by = id],
mikec_str = DT[ , .(paste(unique(sex), collapse = ","),
score = max(score)), by = id],
count = DT %>% group_by(id) %>%
summarise(score = max(score),
sex = paste(unique(sex),collapse=",")))
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 500L,
mikec = DT[ , .(list(unique(sex)), max(score)), by = id],
mikec_str = DT[ , .(paste(unique(sex), collapse = ","),
score = max(score)), by = id],
count = DT %>% group_by(id) %>%
summarise(score = max(score),
sex = paste(unique(sex),collapse=",")))
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 1000L,
mikec = DT[ , .(list(unique(sex)), max(score)), by = id],
mikec_str = DT[ , .(paste(unique(sex), collapse = ","),
score = max(score)), by = id],
count = DT %>% group_by(id) %>%
summarise(score = max(score),
sex = paste(unique(sex),collapse=",")))
set.seed(102349)
NN <- 1e6
DT <- data.table(id = sample(c("a","b","c"), NN, TRUE),
sex = sample(c("M","F"), NN, TRUE),
score = sample(12, NN, TRUE))
library(microbenchmark)
library(dplyr)
microbenchmark(times = 100L,
mikec = DT[ , .(list(unique(sex)), max(score)), by = id],
mikec_str = DT[ , .(paste(unique(sex), collapse = ","),
score = max(score)), by = id],
count = DT %>% group_by(id) %>%
summarise(max(score),
paste(unique(sex),collapse=",")))
data.table:::print.data.table
getOption("datatable.print.topn")
?data.table
?fitdistr
True
true
TRUE
?objects
objects()
base::cbind.data.frame
sample(c(rep(1, 7), 3, 3, 5))
ample(6, 10, TRUE)
sample(6, 10, TRUE)
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23,
29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97,
101, 103, 107)
primes %% primes
sapply(primes, `%%`, primes)
x <- sapply(primes, `%%`, primes)
x[lower.tri(x)]
any(!x[lower.tri(x)])
any(!x[upper.tri(x)])
sapply(2:108, `%%`, 2:108)
x <- sapply(2:108, `%%`, 2:108)
upp <- x[upper.tri(x)]
upp
x[upper.tri(x)]
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23,
29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97,
101, 103, 107)
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
cumsum(rolls) %in% primes
rolls
cumsum(rolls)
(1:3)[c(FALSE, FALSE, FALSE)]
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes)) return(rolls[1:which(idx)[1]])
rolls
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes)) return(rolls[1:which(idx)[1]])
rolls
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes)) return(rolls[1:which(idx)[1]])
rolls
{
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
{
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
{
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
{
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
{
rolls <- sample(c(rep(1, 7), 3, 3, 5)) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
mults <- c(rep(1, 7), 3, 3, 5)
{
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
{
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
{
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}
primes
?primes
?which
length(integer(0))
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23,
29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97,
101, 103, 107)
mults <- c(rep(1, 7), 3, 3, 5)
nn <- 10
replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls})
rbindlist(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}))
setDT(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}))
setNames(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}), 1:nn)
unlistsetNames(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}), 1:nn))
unlist(setNames(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}), 1:nn))
dcast(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}))
transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls}))
transpose(transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
if (any(idx <- cumsum(rolls) %in% primes))
rolls[1:which(idx)[1]] else rolls})))
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[-(1:which(cumsum(rolls) %in% primes)[1L])] <- NA
rolls
rolls
rolls[integer(0)] <- NA
rolls
rolls[-1:integer(0)] <- NA
1:5 > integer(0)
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L])] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L])] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls
replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls})
replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE)
transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))
setDT(transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE)))
setDT(transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE)))[]
setnames(setDT(transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:10)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)][]
setnames(setDT(transpose(replicate(nn, {
rolls <- sample(mults) * sample(6, 10, TRUE)
rolls[1:10 > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:10)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)
][ , c("RunningTotalWin", "RunningTotalBet") :=
.(cumsum(WinAmount), 17 * (1:.N))][]
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107)
mults <- rep(c(1, 3, 5), c(7, 2, 1)); n_rep <- 10; n_dice <- 10
output <- setnames(setDT(transpose(replicate(n_rep, {
rolls <- sample(fktr) * sample(6, n_dice, TRUE)
rolls[1:n_dice > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:n_dice)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)
][ , c("RunningTotalWin", "RunningTotalBet") :=
.(cumsum(WinAmount), 17 * (1:.N))]
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107)
mults <- rep(c(1, 3, 5), c(7, 2, 1)); n_rep <- 10; n_dice <- 10
output <- setnames(setDT(transpose(replicate(n_rep, {
rolls <- sample(mults) * sample(6, n_dice, TRUE)
rolls[1:n_dice > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:n_dice)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)
][ , c("RunningTotalWin", "RunningTotalBet") :=
.(cumsum(WinAmount), 17 * (1:.N))]
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107)
mults <- rep(c(1, 3, 5), c(7, 2, 1)); n_rep <- 1e6; n_dice <- 10
output <- setnames(setDT(transpose(replicate(n_rep, {
rolls <- sample(mults) * sample(6, n_dice, TRUE)
rolls[1:n_dice > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:n_dice)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)
][ , c("RunningTotalWin", "RunningTotalBet") :=
.(cumsum(WinAmount), 17 * (1:.N))]
output[ , plot(1:.N, RunningTotalWin - RunningTotalBet)]
output[ , table(WinAmount)]
output[ , hist(WinAmount)]
dev.off()
output[ , hist(WinAmount)]
output[ , hist(WinAmount, breaks = 100)]
output[ , hist(WinAmount, breaks = primes)]
output[ , mean(WinAmount)]
library(rvest)
url <- "http://www.when2meet.com/?4474391-IBuBA"
test <- html(url) %>% html_nodes(xpath = '//*[@id="GroupGrid"]')
test
head(grid)
grid <- html(url) %>% html_nodes(xpath = '//*[@id="GroupGrid"]')
head(grid)
str(grid)
head(grid[[1]])
grid[[1]]
class(grid[[1]])
length(grid[[1]])
substr(grid[[1]], 1, 1000)
output <- data.table(id = rep(c("user1", "user2"), each = 4),
slot = rep(c("M 9:00", "T 9:30", "W 10:00", "R 10:30"), 2)
available = as.logical(c(1, 0, 1, 1, 1, 0, 1, 0)))
output <- data.table(id = rep(c("user1", "user2"), each = 4),
slot = rep(c("M 9:00", "T 9:30", "W 10:00", "R 10:30"), 2),
available = as.logical(c(1, 0, 1, 1, 1, 0, 1, 0)))
output
output <- data.table(id = rep(c("user_1", "user_2"), each = 4),
slot = rep(c("M 9:00", "T 9:30", "W 10:00", "R 10:30"), 2),
available = as.logical(c(1, 0, 1, 1, 1, 0, 1, 0)))
SOprint(output)
xx <- 2:10
g5 <- ((xx - 1)/xx) ^ 5
(1 - g5)*(1 - g5) * g5
plot(xx, (1 - g5)*(1 - g5) * g5)
xx <- 2:100
g5 <- ((xx - 1)/xx) ^ 5
plot(xx, (1 - g5)*(1 - g5) * g5)
xx[which.max((1 - g5)*(1 - g5) * g5)]
output
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107)
mults <- rep(c(1, 3, 5), c(7, 2, 1)); n_rep <- 1e6; n_dice <- 10
output <- setnames(setDT(transpose(replicate(n_rep, {
rolls <- sample(mults) * sample(6, n_dice, TRUE)
rolls[1:n_dice > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:n_dice)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)
][ , c("RunningTotalWin", "RunningTotalBet") :=
.(cumsum(WinAmount), 17 * (1:.N))]
output[!is.na(die10), .N]
54616/1e6
primes <- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107)
mults <- rep(c(1, 3, 5), c(7, 2, 1)); n_rep <- 1e6; n_dice <- 10
output <- setnames(setDT(transpose(replicate(n_rep, {
rolls <- sample(mults) * sample(6, n_dice, TRUE)
rolls[1:n_dice > which(cumsum(rolls) %in% primes)[1L]] <- NA
rolls}, simplify = FALSE))), paste0("die", 1:n_dice)
)[ , WinAmount := rowSums(.SD, na.rm = TRUE)
][!is.na(die10) & WinAmount %in% primes, WinAmount := 0
][ , c("RunningTotalWin", "RunningTotalBet") :=
.(cumsum(WinAmount), 17 * (1:.N))]
output[ , mean(WinAmount)]
output[!is.na(die10) & winAmount > 0, .N]
output[!is.na(die10) & WinAmount > 0, .N]
output[!is.na(die10), mean(WinAmount > 0)]
script <- paste(readLines("http://www.when2meet.com/?4474391-IBuBA"), collapse="\n")
script
script[grepl("TimeOfSlot", script)]
script[grepl("TimeOfSlot\\[(\\d+)\\]=(\\d+);", script)]
script[grepl("TimeOfSlot\\[(\\d+)\\]=(\\d+);", script)][1]
regmatches(script, gregexpr("TimeOfSlot\\[(\\d+)\\]=(\\d+);", script))[[1]]
sapply(2:108, function(nn) if (!any(nn %% 2:ceiling(sqrt(nn)))))
sapply(2:108, function(nn) if (!any(nn %% 2:ceiling(sqrt(nn)))) nn)
3 %% (2:3)
3 %% (2:3)
system.time(3 %% (2:3))
system.time(3 %% (2:3))
system.time(3 %% (2:ceiling(sqrt(3))))
3 %% (2:ceiling(sqrt(3)))
2:ceiling(sqrt(3))
!any(3 %% (2:ceiling(sqrt(3))))
!any(3L %% (2:ceiling(sqrt(3))))
all(3L %% (2:ceiling(sqrt(3))))
sapply(2L:108L, function(nn) if (all(nn %% 2:ceiling(sqrt(nn)))) nn)
unlist(sapply(2L:108L, function(nn) if (all(nn %% 2:ceiling(sqrt(nn)))) nn))
setNames
script <- paste(readLines("http://www.when2meet.com/?4474391-IBuBA"), collapse="\n")
f <- function(regex) {
m <- regmatches(script, gregexpr(regex, script))[[1]]
return(as.data.frame(t(sapply(regmatches(m, regexec(regex, m)), "[", -1)), stringsAsFactors = FALSE))
}
slots <- f("TimeOfSlot\\[(\\d+)\\]=(\\d+);")
users <- f( "PeopleNames\\[(\\d+)\\] = '([^']+)';PeopleIDs\\[\\d+\\] = (\\d+);")
avails <- f("AvailableAtSlot\\[(\\d+)]\\.push\\((\\d+)\\);")
library(reshape2)
df <- melt(dcast(avails, V2~V1, fun.aggregate = length, value.var = "V2"), id.vars = "V2", variable.name = "timeslot", value.name = "available")
df$timeslot <- as.POSIXct(as.integer(slots$V2[match(df$timeslot, slots$V1)]), origin="1970-01-01", tz = "GMT")
df$V2 <- users$V2[match(df$V2, users$V3)]
df$weekday <- format(df$timeslot, "%a")
df$time <- format(df$timeslot, "%H:%M")
subset(df, weekday=="Mo" & time=="11:00" & available==1)$V2
# [1] "user_1"  "user_2"  "user_3"  "user_4"  "user_5"  "user_7"  "user_10"
subset(df, weekday=="Mo" & time=="11:00" & available==0)$V2
# [1] "user_6" "user_8" "user_9"
df
